{"ast":null,"code":"var _jsxFileName = \"/Users/aleksandra/Desktop/ergonza/src/Platform-intro-app/Platform-barometer/PlatformBarometer.js\";\nimport React from \"react\";\nimport './PlatformBarometer.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class PlatformBarometer extends React.Component {\n  renderBarometer() {\n    let indicators = [];\n    const startAngle = 0;\n    const endAngle = 180;\n    const indicatorsNumber = 41;\n    const step = (endAngle - startAngle) / indicatorsNumber;\n    let angle = startAngle; //угол наклона\n\n    let color = \"red\";\n    let procentNumber = 75;\n    let oneDeg = endAngle / 100;\n    let procentNumberInDeg = oneDeg * procentNumber; //число в градусах\n\n    let highlighted = \"highlighted\";\n    let opacity = 1;\n\n    for (let i = 0; i < indicatorsNumber; i++) {\n      if (i <= 13) {\n        color = \"red\";\n      } else if (i > 13 && i <= 27) {\n        color = \"yellow\";\n      } else {\n        color = \"green\";\n      }\n\n      if (procentNumberInDeg >= angle) {\n        indicators.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `barometer-indicator ${color} ${highlighted}`,\n          style: {\n            transform: `rotate(${angle}deg)`,\n            opacity: `${opacity}`\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this));\n        angle += step;\n      } else {\n        indicators.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `barometer-indicator ${color}`,\n          style: {\n            transform: `rotate(${angle}deg)`\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this));\n        angle += step;\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"barometer\",\n      children: [indicators, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"barometer-circle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"start-procent\",\n        children: \"0%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"end-procent\",\n        children: \"100%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"barometer-arrow\",\n        style: {\n          transform: `rotate(${procentNumberInDeg}deg)`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"barometer-arrow-procent\",\n        children: [procentNumber, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    return;\n\n    /*#__PURE__*/\n    _jsxDEV(\"div\", {\n      className: \"barometer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/aleksandra/Desktop/ergonza/src/Platform-intro-app/Platform-barometer/PlatformBarometer.js"],"names":["React","PlatformBarometer","Component","renderBarometer","indicators","startAngle","endAngle","indicatorsNumber","step","angle","color","procentNumber","oneDeg","procentNumberInDeg","highlighted","opacity","i","push","transform","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,0BAAP;;AAEA,OAAO,MAAMC,iBAAN,SAAgCD,KAAK,CAACE,SAAtC,CAAgD;AAErDC,EAAAA,eAAe,GAAG;AAChB,QAAIC,UAAU,GAAG,EAAjB;AACA,UAAMC,UAAU,GAAG,CAAnB;AACA,UAAMC,QAAQ,GAAG,GAAjB;AACA,UAAMC,gBAAgB,GAAG,EAAzB;AACA,UAAMC,IAAI,GAAG,CAACF,QAAQ,GAAGD,UAAZ,IAA0BE,gBAAvC;AACA,QAAIE,KAAK,GAAGJ,UAAZ,CANgB,CAMQ;;AACxB,QAAIK,KAAK,GAAG,KAAZ;AACA,QAAIC,aAAa,GAAG,EAApB;AACA,QAAIC,MAAM,GAAGN,QAAQ,GAAG,GAAxB;AACA,QAAIO,kBAAkB,GAAGD,MAAM,GAAGD,aAAlC,CAVgB,CAUiC;;AACjD,QAAIG,WAAW,GAAG,aAAlB;AACA,QAAIC,OAAO,GAAG,CAAd;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,gBAApB,EAAsCS,CAAC,EAAvC,EAA2C;AACzC,UAAIA,CAAC,IAAI,EAAT,EAAa;AACXN,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO,IAAIM,CAAC,GAAG,EAAJ,IAAUA,CAAC,IAAI,EAAnB,EAAuB;AAC5BN,QAAAA,KAAK,GAAG,QAAR;AACD,OAFM,MAEA;AACLA,QAAAA,KAAK,GAAG,OAAR;AACD;;AAED,UAAIG,kBAAkB,IAAIJ,KAA1B,EAAiC;AAC/BL,QAAAA,UAAU,CAACa,IAAX,eACE;AAEE,UAAA,SAAS,EAAG,uBAAsBP,KAAM,IAAGI,WAAY,EAFzD;AAGE,UAAA,KAAK,EAAE;AAAEI,YAAAA,SAAS,EAAG,UAAST,KAAM,MAA7B;AAAoCM,YAAAA,OAAO,EAAG,GAAEA,OAAQ;AAAxD;AAHT,WACOC,CADP;AAAA;AAAA;AAAA;AAAA,gBADF;AAOAP,QAAAA,KAAK,IAAID,IAAT;AACD,OATD,MASO;AACLJ,QAAAA,UAAU,CAACa,IAAX,eACE;AAEE,UAAA,SAAS,EAAG,uBAAsBP,KAAM,EAF1C;AAGE,UAAA,KAAK,EAAE;AAAEQ,YAAAA,SAAS,EAAG,UAAST,KAAM;AAA7B;AAHT,WACOO,CADP;AAAA;AAAA;AAAA;AAAA,gBADF;AAOAP,QAAAA,KAAK,IAAID,IAAT;AACD;AACF;;AACD,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,iBACGJ,UADH,eAEE;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AACE,QAAA,SAAS,EAAC,iBADZ;AAEE,QAAA,KAAK,EAAE;AAAEc,UAAAA,SAAS,EAAG,UAASL,kBAAmB;AAA1C;AAFT;AAAA;AAAA;AAAA;AAAA,cALF,eASE;AAAK,QAAA,SAAS,EAAC,yBAAf;AAAA,mBAA0CF,aAA1C;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAaD;;AAEDQ,EAAAA,MAAM,GAAG;AACP;;AAGE;AAAA;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA;AAEH;;AAlEoD","sourcesContent":["import React from \"react\";\nimport './PlatformBarometer.scss';\n\nexport class PlatformBarometer extends React.Component {\n\n  renderBarometer() {\n    let indicators = [];\n    const startAngle = 0;\n    const endAngle = 180;\n    const indicatorsNumber = 41;\n    const step = (endAngle - startAngle) / indicatorsNumber;\n    let angle = startAngle; //угол наклона\n    let color = \"red\";\n    let procentNumber = 75; \n    let oneDeg = endAngle / 100;\n    let procentNumberInDeg = oneDeg * procentNumber; //число в градусах\n    let highlighted = \"highlighted\";\n    let opacity = 1;\n\n    for (let i = 0; i < indicatorsNumber; i++) {\n      if (i <= 13) {\n        color = \"red\";\n      } else if (i > 13 && i <= 27) {\n        color = \"yellow\";\n      } else {\n        color = \"green\";\n      }\n\n      if (procentNumberInDeg >= angle) {\n        indicators.push(\n          <div\n            key={i}\n            className={`barometer-indicator ${color} ${highlighted}`}\n            style={{ transform: `rotate(${angle}deg)`, opacity: `${opacity}` }}\n          ></div>\n        );\n        angle += step;\n      } else {\n        indicators.push(\n          <div\n            key={i}\n            className={`barometer-indicator ${color}`}\n            style={{ transform: `rotate(${angle}deg)` }}\n          ></div>\n        );\n        angle += step;\n      }\n    }\n    return (\n      <div className=\"barometer\">\n        {indicators}\n        <div className=\"barometer-circle\"></div>\n        <div className=\"start-procent\">0%</div>\n        <div className=\"end-procent\">100%</div>\n        <div\n          className=\"barometer-arrow\"\n          style={{ transform: `rotate(${procentNumberInDeg}deg)` }}\n        ></div>\n        <div className=\"barometer-arrow-procent\">{procentNumber}%</div>\n      </div>\n    );\n  }\n\n  render() {\n    return \n    \n   \n      <div className=\"barometer\"></div>\n    \n  }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}